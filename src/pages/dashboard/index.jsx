import Head from 'next/head'
import Image from 'next/image'
import { useSelector, useDispatch } from 'react-redux';
import { setUser } from '../../store/user/slice.user';
import styles from './Dashboard.module.scss'
import Header from 'components/Header'
import HeaderRight from 'components/Header/Right'
import Tile from 'components/Buttons/SocialMedia/Tile'
import { verifyToken } from 'utils/verifyToken';
import { useEffect } from 'react';
import AccordionTabs from 'components/Accordion/Tabs';

const data = [
  { id: 1, title: 'Tile 1', description: 'Description of tile 1' },
  { id: 2, title: 'Tile 2', description: 'Description of tile 2' },
  { id: 3, title: 'Tile 3', description: 'Description of tile 3' },
  { id: 4, title: 'Tile 1', description: 'Description of tile 1' },
  { id: 5, title: 'Tile 2', description: 'Description of tile 2' },
  { id: 6, title: 'Tile 3', description: 'Description of tile 3' },
  // more tile data...
];

const tabs = [
  {
    title: "Links",
    content: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
  },
  {
    title: "Stats",
    content: "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
  },
  {
    title: "Tab 3",
    content: "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
  },
];

export default function Dashboard(props) {
  const profileImage = useSelector(state => state.user.profileImage);
  const dispatch = useDispatch();

  useEffect(() => {
    if (props.profileImage) {
      dispatch(setUser({ profileImage: props.profileImage }))
    }
  }, []);



  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500&display=swap" rel="stylesheet" />
      </Head>
      <Header>
        <HeaderRight isLoggedIn />
      </Header>
      <main className={styles.main}>
        <div className={styles.container}>
          <section className={styles.preview}>
            <div className={styles.mobile}>
              <div className={styles.sectionContainer}>
                <Image className={styles.profileImage} src={profileImage} width={96} height={96} alt={'logo'}></Image>
              </div>
              <div className={[`${styles.sectionContainer} ${styles.nameSection}`]}>
                <div className={styles.username}>
                  <h1 className={styles.sectionTitle}>John Doe</h1>
                </div>
              </div>
              <div className={[`${styles.sectionContainer} ${styles.socialSection}`]}>
                <h1 className={styles.sectionTitle}>Socials</h1>
                <Tile data={data} />
              </div>
            </div>
          </section>
          <section className={styles.settings}>
            <AccordionTabs tabs={tabs} />
          </section>
        </div>
      </main>
    </>
  )
}


export async function getServerSideProps(context) {
  const { bio_auth_token: token } = context.req.cookies; // get the token from cookies

  // If there is no token, redirect the user to the login page
  if (!token) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  try {
    const decoded = await verifyToken(token);
    console.log("ðŸš€ ~ file: index.jsx:85 ~ getServerSideProps ~ decoded:", decoded)
    if (!decoded) {
      return {
        redirect: {
          destination: '/login',
          permanent: false,
        },
      };
    }
    return {
      props: { profileImage: 'https://i.pravatar.cc/150?img=1' },
    };
  } catch (error) {
    // If the token is invalid, clear the cookie and redirect the user to the login page
    context.res.clearCookie('token');
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }
}

